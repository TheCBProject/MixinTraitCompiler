plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    withJavadocJar()
}

group 'io.codechicken'
version '3.0.0'
archivesBaseName = 'TraitMixinCompiler'

version = "$version." + (System.getenv("BUILD_NUMBER") ?: "1")
println "Starting build of ${name}, Version: ${version}"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.covers1624.net/" }
    maven { url "https://maven.minecraftforge.net/" }
}

dependencies {
    api 'org.slf4j:slf4j-api:2.0.1'

    api 'net.covers1624:Quack:0.4.10.89'

    api('io.codechicken:ChickenASM:4.0.0.18') {
        transitive = false
    }
    api 'org.ow2.asm:asm:9.2'
    api 'org.ow2.asm:asm-tree:9.2'
    api 'org.ow2.asm:asm-commons:9.2'
    api 'org.ow2.asm:asm-util:9.2'

    api 'com.google.guava:guava:31.0.1-jre'

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.jetbrains:annotations:22.0.0'

    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.32'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

jar {
    manifest {
        attributes 'FMLModType': 'GAMELIBRARY'
    }
}

tasks.register('signJar') {
    dependsOn('jar')

    doFirst {
        def args = [:]
        args['jar'] = jar.archiveFile.get().asFile
        if (System.getenv("KEY_STORE")) {
            args['keyStore'] = System.getenv("KEY_STORE")
            file(System.getenv("KEY_STORE_PROPS")).withReader {
                def props = new Properties()
                props.load(it)
                args.putAll(props)
            }
        } else if (project.hasProperty('keyStore')) {
            args['keyStore'] = project.getProperty('keyStore')
            args['alias'] = project.getProperty('keyStoreAlias')
            args['storePass'] = project.getProperty('keyStorePass')
            args['keyPass'] = project.getProperty('keyStoreKeyPass')
        } else {
            println "No signing properties."
            state.setOutcome(org.gradle.api.internal.tasks.TaskExecutionOutcome.UP_TO_DATE)
            didWork = false
            return
        }
        project.ant.invokeMethod('signjar', args)
    }
}

javadoc {
    options.addBooleanOption("Xdoclint:none", true)
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        TraitMixinCompiler(MavenPublication) {
            group = rootProject.group
            version = rootProject.version

            from components['java']

            pom {
                name = archivesBaseName
                description = archivesBaseName
                url = "https://github.com/TheCBProject/TraitMixinCompiler"
                scm {
                    url = "https://github.com/TheCBProject/TraitMixinCompiler"
                    connection = "scm:git:git://github.com/TheCBProject/TraitMixinCompiler.git"
                    connection = "scm:git:git@github.com:TheCBProject/TraitMixinCompiler.git"
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/TheCBProject/TraitMixinCompiler/issues"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/TheCBProject/TraitMixinCompiler/master/LICENSE.txt"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
                developers {
                    developer {
                        id = 'chicken-bones'
                        name = 'chicken-bones'
                    }
                }
            }
        }
    }
}


signing {
    if (System.getenv('GPG_PRIVATE_KEY')) {
        useInMemoryPgpKeys(
                new File(System.getenv('GPG_PRIVATE_KEY')).text,
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (project.hasProperty('gpgPrivateKey')) {
        useInMemoryPgpKeys(
                new File(project.getProperty('gpgPrivateKey')).text,
                project.getProperty('gpgPrivateKeyPass')
        )
    } else {
        return
    }
    sign publishing.publications.TraitMixinCompiler
}
